# name: Express CI/CD

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Login to the server and run command
#         env:
#           SSH_HOST: ${{ secrets.SSH_HOST }}
#           SSH_USER: ${{ secrets.SSH_USER }}
#           SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#         run: |
#           echo "$SSH_PRIVATE_KEY" > key.pem
#           chmod 600 key.pem
#           ssh -i key.pem -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "ls"
#           rm -f key.pem

name: Repository Synchronization

on:
  push:
    branches:
      - main

jobs:
  sync-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Synchronize repository
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          GITHUB_REPO: ${{ github.repository }}
        run: |
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 600 key.pem
          
          # Define target directory and repo URL
          TARGET_DIR="/myapp"
          REPO_URL="git@github.com:${GITHUB_REPO}.git"
          
          # Use double quotes for variable expansion in heredoc
          ssh -i key.pem -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            # Create target directory if it doesn't exist
            sudo mkdir -p "$TARGET_DIR"
            sudo chown -R $SSH_USER:$SSH_USER "$TARGET_DIR"
            
            # Check if repository exists
            if [ -d "$TARGET_DIR/.git" ]; then
              echo "Updating existing repository..."
              cd "$TARGET_DIR"
              git remote set-url origin "$REPO_URL"
              git fetch origin
              git reset --hard origin/main
            else
              echo "Cloning repository..."
              git clone "$REPO_URL" "$TARGET_DIR"
            fi
            
            # Verify synchronization
            echo "Repository synchronized to:"
            cd "$TARGET_DIR" && git log -1 --oneline
          EOF
          
          rm -f key.pem